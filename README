Miredo : Teredo for Linux
==========================
$Id$
Copyright (C) 2004 Remi Denis-Courmont.

  Welcome to Miredo's user's guide!

Where to go?
=============
  If you've used olders versions of this program, you should read NEWS
for a summary of the most recent updates and changes.

  For detailled usage instructions, you should refer to the Unix manual
page miredo(8) which should be provided with your copy of the program.
For quick usage instructions, see below.

  See INSTALL for general instructions on how to build the package and
install the program from sources. Additionnal informations may be found
below. If you are building from the Subversion repository, run the
'./bootstrap' script first.

  This package is distributed under the terms of the General Public
License (GPL) version 2 written by the Free Software Foundation, Inc.
for full licensing details, please read COPYING.

  This software is at a very early development stage. Do NOT use it in
production/critical environment. Contributions, feedback and bug
reports are most welcome. You might get additonnal informations from
the website at : http://www.simphalempin.com/dev/miredo/

  If you have further questions, you can contact me via email at :
    rdenis (at) simphalempin (dot) com


What is Miredo?
================

  Miredo is an Unix daemon program which implements the "Teredo:
Tunneling IPv6 over UDP through NATs" Internet draft specification.
At the moment, Miredo runs fine on GNU/Linux 2.6.x and not so fine on
FreeBSD 4.x/5.x. It can provide either client, relay and server
functionnality.
  Linux 2.4.x IPv6 support is pretty buggy and broken, so it is not
supported. Upgrade to branch 2.6.x if you're serious about IPv6.

  Miredo can be used to provide IPv6 connectivity to users behind NAT
which do not support IPv6, and not even proto-41 forwarding. For this
to work, users need to have a Teredo client running on their system.
That can be Miredo itself on Linux/FreeBSD. Microsoft provides a Teredo
client built-in with Windows XP SP2 IPv6 stack, and in its "Advanced
Networking pack" for Windows XP SP1. 

  For more informations on the Teredo technology, please refer to the
Microsoft IPv6 : Teredo overview.


Quick usage
============
  Miredo must be started by root. Miredo will always detach and run in the
background. Read your system logs to see what happens.


a) as a Teredo client:
-----------------------
  If you want to use Miredo as a Teredo client, so as to access the IPv6
Internet from behind a NAT, you must tell Miredo which Teredo server it
should use. For example:

# src/miredo teredo.ipv6.microsoft.com


b) as a Teredo server and relay:
---------------------------------
  If you have two subsequent static IPv4 addresses on your system, you
may be able to run a Teredo server. To start the program as a Teredo
server, type the following command:

# src/miredo -s 9.0.0.2

where it is assumed that 9.0.0.2 will be your server's primary IPv4
address, and 9.0.0.3 will be your server's secondary IPv4 address.


c) as a stand-alone Teredo relay:
----------------------------------
  Otherwise, it is possible to run a Teredo relay. To do so, you only
need to start miredo without parameters:

# src/miredo

  That will created a virtual "teredo" networking interface which will
accept IPv6 traffic toward Teredo clients. Note that you must NOT be
behind a "symmetric NAT" for this to work properly.
  If you are behind a cone NAT or no NAT device at all, you should tell
Miredo to use optimizations for cone NATs:

# src/miredo -C


Securing you Miredo installation
=================================

  By default, Miredo drops its root privileges and runs as user nobody.
While that is far more secure than keeping root privileges as previous
versions did by default, it is not optimal. If you are security
concious, paranoid, or if you are building a package, you are advised
to perform the following steps to restrict the impact of a possible
compromise of the Miredo daemon.

  They are various steps to secure Miredo installation, because they
are non trivial and non portable they cannot be done automatically.
That is why miredo defaults to using "nobody" user account which is
available on any POSIX-like operating system.


1) System user:
----------------
  Miredo should run with its own user account rather than common user
"nobody". They are two ways to do that :

- You can enable the '--enable-miredo-user' command line option when
  running the source code configure script. If you are a packager,
  please use that method. Miredo will try to SetUID as "miredo" by
  default, though that can be overriden with the '-u' command line
  option (see man page miredo(8)).

- You can use the '-u' option when starting Miredo. That saves the
  cost of recompiling Miredo. For example:

  # /usr/local/sbin/miredo -u miredo -t /

NOTE: If you are running Miredo as a Teredo client, Miredo will spawn a
separate privileged process whose only job will be the Teredo interface
parameters (it must be root to do that). If someone breaks Miredo, it
might still be able to break your IPv6 networking setup, but it should
not be able to compromise the whole system.


2) Chroot jail:
----------------
  Unless you started miredo with command line option '-t /', or used
the already mentioned configure option '--disable-miredo-user', miredo
will try to chroot itself. By default, it will chroot in the miredo
user's home directory, but that can be overriden with the '-t' command
line option.
  Indeed, to mitigate risks and reduce your system's exposure, it is
recommended to run miredo inside a chroot jail. However, that makes
installation of the program more complex, so that is not mandatory.

  For the chroot jail to work properly, you should put these device
files (assuming the home directory is /var/lib/miredo):

/var/lib/miredo/dev/null
/var/lib/miredo/dev/net/tun		(Linux only)
/var/lib/miredo/dev/tun0, ...tun15	(FreeBSD only)
/var/lib/miredo/dev/random		(Teredo client only)
/var/lib/miredo/dev/urandom		(Teredo client only)

  root requires read/write access to these files. The miredo
unprivileged user must be able to read "random" and "urandom".

  If you wish to use Miredo as a Teredo client, you should additionnaly
put a copy of these files from /etc into /var/lib/miredo/etc so that
DNS resolution of the Teredo server works:

/etc/resolv.conf
/etc/hosts
/etc/host.conf
and your system's DNS resolver library in /lib. If in doubt, don't
chroot if you intend to run Miredo as a Teredo client.

  You should also create this directory (where miredo tries to put its
process-ID file). Only miredo should be allowed to write to it:

/var/lib/miredo/var/run/miredo/

  Finally, you must tell your syslog daemon to listen to
/var/lib/miredo/dev/log. That is usually done by adding that option to
your syslogd upon start: '-a /var/lib/miredo/dev/log'. If you don't do
so, you won't get any logging information from Miredo (nor if it hasn't
read-write access to dev/log, but it should no problem). How to do that
depends on what operating system and which distribution thereof you
use.


3) POSIX capabilities:
-----------------------
  Miredo supports POSIX.1e capabilities (at least on Linux), if they
are available. You should not need to worry as it is entirely
automatic.

  If you are a packager, you should consider installing your system's
POSIX capabilities library development files, before building Miredo.


Feedback:
==========
  If you have further questions, you can contact me via email at :

    rdenis (at) simphalempin (dot) com


-- 
Remi Denis-Courmont <rdenis (at) simphalempin (dot) com>
http://www.simphalempin.com/dev/miredo/

